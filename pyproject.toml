[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy"
]
dependencies = [
  "pandas",
  "jupyter",
  "hatch",
  "openpyxl",
  "transformers",
  "scikit-learn",
  "datasets",
  "transformers[torch]",
  "torch==2.3.1",
  "torchvision==0.18.1",
  "torchaudio==2.3.1",
  "numpy==1.26.4",
  "faiss-cpu"
]
description = ''
dynamic = ["version"]
keywords = []
license-files = {paths = ["LICENSE"]}
name = "nlp_similarity"
readme = "README.md"
requires-python = ">=3.9 "

[tool.bandit]
exclude_dirs = ['wiki', 'docs', '.git', '.vscode', 'pyproject.toml']

[tool.bandit.assert_used]
skips = ['*_test.py', '*test_*.py']

[tool.hatch.build.targets.sdist]
exclude = [
  ".pipelines",
  ".azuredevops",
  "dist",
  "tests",
  "notebooks",
  ".idea",
  "aml"
]
packages = ["src"]

[tool.hatch.build.targets.wheel]
exclude = [
  ".pipelines",
  ".azuredevops",
  "dist",
  "tests",
  "notebooks",
  ".idea",
  "aml"
]
packages = ["src"]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.default]
dependencies = [
  "bandit",
  "pre-commit",
  "ruff"
]

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs-material",
  "mkdocstrings[python]>=0.24",
  "Pygments",
  "mkdocs-glightbox"
]
detached = true

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve"

[tool.hatch.version]
path = "src/__about__.py"

[tool.ruff]
exclude = [
  ".venv",
  ".hatch",
  ".git",
  ".pipelines",
  "tests",
  "wiki",
  ".idea",
  "*.yml",
  "*.yaml"  # Include this if you also want to exclude .yaml files
]
line-length = 130
target-version = "py310"

[tool.ruff.lint]
ignore = [
  # Ignore print statements
  "T201",
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Boolean in function definitions
  "FBT001",
  "FBT002",
  # Function call in arguemnt defaults, but required for FastAPI dependencies
  # "B008",
  # Unused function argument and redifiniton (will complain lots in pytests)
  # "ARG001",
  # Mixed case class names
  "N815",
  # For ruff formater
  # 'Q000',
  'W191',
  'ISC001'
]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT"
]
unfixable = [
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = ["src"]
